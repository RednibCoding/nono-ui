---
import { getCollection } from "astro:content";
import type { CollectionEntry } from "astro:content";
import DefaultLayout from "../../layouts/DefaultLayout.astro";
import { Code } from "astro/components";

export async function getStaticPaths() {
    const components = await getCollection("components");
    const paths = components.map((component: any) => {
        return {
            params: {
                slug: component.slug,
            },
            props: {
                component,
            },
        };
    });

    return paths;
}

type Props = {
    component: CollectionEntry<"components">;
};

const { component } = Astro.props;

// We dont want the previews to have functional hrefs
const bodyWithoutHrefs = component.body
    .replace(/href\s*=\s*(['"])[^'"]*\1/g, "")
    .replace(/target\s*=\s*(['"])[^'"]*\1/g, "");
---

<DefaultLayout>
    <div class="container mx-auto py-6 px-10">
        <!-- Back link -->
        <a
            href="/explore"
            class="flex items-center text-md font-medium text-[#4e74bb] transition-colors duration-300 select-none"
        >
            <div>
                <svg
                    class="w-4 h-4"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                    xmlns="http://www.w3.org/2000/svg"
                >
                    <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M15 19l-7-7 7-7"></path>
                </svg>
            </div>
            <span class="ml-2 hover:translate-x-1 duration-200"> Back </span>
        </a>

        <!-- Tabbar -->
        <div class="my-10 select-none">
            <nav class="flex gap-2" aria-label="Tabs">
                <span
                    class="tab-link w-[80px] text-center bg-[#4e74bb] bg-[#8bb7ff8c] text-white rounded p-2 text-sm font-medium cursor-pointer transition-colors duration-300"
                    data-tab="View"
                >
                    View
                </span>
                <span
                    class="tab-link w-[80px] text-center bg-[#8bb7ff8c] rounded p-2 text-sm font-medium cursor-pointer transition-colors duration-300"
                    data-tab="HTML"
                >
                    HTML
                </span>
            </nav>

            <h1 class="text-2xl font-bold mt-10 text-[#4e74bb] text-[28px]">
                {component.data.name}
            </h1>

            <!-- Content based on active tab -->
            <div class="mt-2">
                <div id="tab-content-view" class="tab-content">
                    <!-- View content here -->
                    <div
                        set:html={bodyWithoutHrefs}
                        class="bg-[url('/grid.svg')] bg-repeat min-h-[450px] flex justify-center items-center rounded border border-gray-300 p-4 shadow-md transition-shadow duration-300 hover:shadow-lg"
                    />
                </div>
                <div id="tab-content-html" class="tab-content hidden relative">
                    <!-- HTML content here -->
                    <button
                        id="copy-btn"
                        onclick="() => copyToClipboard(component.body)"
                        class="w-[40px] h-[40px] rounded absolute right-8 top-2 transition-colors duration-300"
                    >
                        <img
                            id="copy-btn-img"
                            class="ml-2.5"
                            src="/copy.svg"
                            width="20"
                            height="20"
                            alt="copy"
                        />
                    </button>
                    <Code
                        class="rounded p-4 max-h-[700px] select-text"
                        code={component.body.trim()}
                        lang="html"
                        theme="dark-plus"
                    />
                </div>
            </div>
        </div>
    </div>
</DefaultLayout>

<script define:vars={{ component }}>
    const tabLinks = document.querySelectorAll(".tab-link");
    const tabContentView = document.getElementById("tab-content-view");
    const tabContentHtml = document.getElementById("tab-content-html");

    const copybtn = document.getElementById("copy-btn");
    const copybtnImg = document.getElementById("copy-btn-img");

    copybtn.addEventListener("click", (event) => {
        navigator.clipboard.writeText(component.body).then(
            function () {
                // Change the image source to check.svg
                copybtnImg.src = "/check.svg";

                // After 3 seconds, change it back to copy.svg
                setTimeout(function () {
                    copybtnImg.src = "/copy.svg";
                }, 3000);
            },
            function (err) {
                console.error("Async: Could not copy text: ", err);
            },
        );
    });

    tabLinks.forEach((link) => {
        link.addEventListener("click", (event) => {
            event.preventDefault();
            const selectedTab = event.target?.getAttribute("data-tab");

            if (selectedTab === "View") {
                tabContentView?.classList.remove("hidden");
                tabContentHtml?.classList.add("hidden");
                tabLinks[0].classList.add("bg-[#4e74bb]", "text-white");
                tabLinks[1].classList.remove("bg-[#4e74bb]", "text-white");
            } else if (selectedTab === "HTML") {
                tabContentView?.classList.add("hidden");
                tabContentHtml?.classList.remove("hidden");
                tabLinks[0].classList.remove("bg-[#4e74bb]", "text-white");
                tabLinks[1].classList.add("bg-[#4e74bb]", "text-white");
            }
        });
    });
</script>
