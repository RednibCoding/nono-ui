---
const { displayName, slug, componentHtml } = Astro.props;
---

<a href={`/components/${slug}`} class="w-[320px] h-[320px] flex flex-col rounded border border-gray-100 bg-white overflow-hidden shadow-md hover:shadow-lg">
    <div class="w-full h-[85%] flex justify-center items-center overflow-hidden relative">
        <div id={`component-preview-${slug}`} class="absolute w-[1240px] h-[1240px] flex justify-center items-center bg-[url('/grid.svg')] bg-repeat rounded border border-gray-300 p-4" set:html={componentHtml}>
        </div>
    </div>
    <div class="w-full flex-grow flex items-center p-2">
        <div class="text-gray-500">
            {displayName}
        </div>
    </div>
</a>

<script define:vars={{slug}}>
    const previewSize = 1240; // Make sure this matches the size in the preview div
      const preview = document.getElementById(`component-preview-${slug}`);
      const previewContainer = preview.parentElement;

      const containerWidth = previewContainer.offsetWidth;
      const containerHeight = previewContainer.offsetHeight;

      const scaleWidth = containerWidth / previewSize;
      const scaleHeight = containerHeight / previewSize;
      const scale = Math.min(scaleWidth, scaleHeight);

      // Ensure minimum scaling if the content is too small
      const minScale = Math.min(containerWidth / 620, containerHeight / 620); // 250 is an arbitrary small size for minimum scaling
      const finalScale = Math.max(scale, minScale);

      preview.style.transform = `scale(${finalScale})`;
      preview.style.transformOrigin = 'top left';
      preview.style.left = `0`;
      preview.style.top = `0`;
      preview.style.position = 'absolute';

      const scaledWidth = previewSize * finalScale;
      const scaledHeight = previewSize * finalScale;
      const offsetX = (containerWidth - scaledWidth) / 2;
      const offsetY = (containerHeight - scaledHeight) / 2;
      preview.style.left = `${offsetX}px`;
      preview.style.top = `${offsetY}px`;
</script>
